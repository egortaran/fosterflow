version: '3.8'
services:
  db:
    container_name: postgres
    image: postgres:15.4-alpine
    privileged: true
    ports:
      - 5432:5432
    env_file:
      - .env
    networks:
      - myNetwork
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:6.2-alpine
    container_name: redis
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - redis:/data
    networks:
      - myNetwork
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  backend:
    container_name: backend
    environment:
      - REDIS_HOST=redis
    env_file:
      - .env
    networks:
      - myNetwork
    build: 
      context: .
      dockerfile: /backend/Dockerfile.dev
    command: ["sh", "-c", "pip install debugpy -t /tmp && python /tmp/debugpy --wait-for-client --listen 0.0.0.0:5678 backend/manage.py runserver 0.0.0.0:8000 --nothreading --noreload"]
    ports:
      - 8000:8000
      - 5678:5678
      

  celery:
    container_name: celery
    build: 
      context: .
      dockerfile: /backend/Dockerfile.dev
    command: celery -A project worker --loglevel=info
    volumes:
      - ./backend:/backend
    depends_on:
      - db
      - redis
    env_file:
      - .env
    networks:
      - myNetwork

  frontend:
    container_name: frontend
    build: 
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    expose:
      - "3000"
    volumes:
      - ./frontend:/frontend
      - '/frontend/node_modules'
    networks:
      - myNetwork
    env_file:
      - .env
    depends_on:
      - db
      - backend
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  swagger:
    container_name: swagger
    build: 
      context: ./swagger
      dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
    volumes:
      - ./swagger:/swagger
    command: bash -c "npm install && npm start"
    networks:
      - myNetwork
    depends_on:
      - db
      - backend

volumes:
  redis:
    driver: local

networks:
  myNetwork:
    driver: bridge